{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport AppStorage from \"../storage/AppStorage\";\nimport AuthNavigator from \"./AuthNavigator\";\nimport StackNavigator from \"./StackNavigator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar AppNavContainer = function AppNavContainer() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isAuthenticated = _React$useState2[0],\n      setIsAuthenticated = _React$useState2[1];\n\n  var getAuthenticationStatus = function getAuthenticationStatus() {\n    var user;\n    return _regeneratorRuntime.async(function getAuthenticationStatus$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AppStorage.getAuthenticationStatus());\n\n          case 2:\n            user = _context.sent;\n\n            if (user) {\n              setIsAuthenticated(true);\n            } else {\n              setIsAuthenticated(false);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  React.useEffect(function () {\n    getAuthenticationStatus();\n  }, [isAuthenticated]);\n  return _jsx(_Fragment, {\n    children: isAuthenticated ? _jsx(StackNavigator, {}) : _jsx(AuthNavigator, {})\n  });\n};\n\nexport default AppNavContainer;","map":{"version":3,"names":["React","AppStorage","AuthNavigator","StackNavigator","AppNavContainer","useState","isAuthenticated","setIsAuthenticated","getAuthenticationStatus","user","useEffect"],"sources":["/home/mayandiraja/Projects/Hackathon/dummy/ineuron_sport_buddy_app/src/navigation/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport AppStorage from '../storage/AppStorage';\nimport AuthNavigator from './AuthNavigator';\nimport StackNavigator from './StackNavigator';\n\nconst AppNavContainer = () => {\n\n    const [isAuthenticated, setIsAuthenticated] = React.useState(false);\n\n    const getAuthenticationStatus = async () => {\n        const user = await AppStorage.getAuthenticationStatus();\n\n        if (user) {\n            setIsAuthenticated(true);\n        } else {\n            setIsAuthenticated(false);\n        }\n    };\n\n    React.useEffect(() => {\n        getAuthenticationStatus();\n    }, [isAuthenticated]);\n\n    return <>\n        {isAuthenticated ? <StackNavigator /> : <AuthNavigator />}\n    </>\n};\n\nexport default AppNavContainer;\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;EAE1B,sBAA8CJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAA9C;EAAA;EAAA,IAAOC,eAAP;EAAA,IAAwBC,kBAAxB;;EAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACTP,UAAU,CAACO,uBAAX,EADS;;UAAA;YACtBC,IADsB;;YAG5B,IAAIA,IAAJ,EAAU;cACNF,kBAAkB,CAAC,IAAD,CAAlB;YACH,CAFD,MAEO;cACHA,kBAAkB,CAAC,KAAD,CAAlB;YACH;;UAP2B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAhC;;EAUAP,KAAK,CAACU,SAAN,CAAgB,YAAM;IAClBF,uBAAuB;EAC1B,CAFD,EAEG,CAACF,eAAD,CAFH;EAIA,OAAO;IAAA,UACFA,eAAe,GAAG,KAAC,cAAD,KAAH,GAAwB,KAAC,aAAD;EADrC,EAAP;AAGH,CArBD;;AAuBA,eAAeF,eAAf"},"metadata":{},"sourceType":"module"}