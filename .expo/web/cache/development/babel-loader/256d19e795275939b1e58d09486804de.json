{"ast":null,"code":"import * as React from \"react\";\nimport 'react-native-gesture-handler';\nimport { Text, HStack, Switch, useColorMode, NativeBaseProvider, extendTheme } from \"native-base\";\nimport RootStore from \"./src/stores/RootStore\";\nimport { observer } from \"mobx-react\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppNavContainer from \"./src/navigation\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar config = {\n  useSystemColorMode: false,\n  initialColorMode: \"dark\"\n};\nexport var theme = extendTheme({\n  config: config\n});\n\nvar ToggleDarkMode = function ToggleDarkMode() {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode,\n      toggleColorMode = _useColorMode.toggleColorMode;\n\n  return _jsxs(HStack, {\n    space: 2,\n    alignItems: \"center\",\n    children: [_jsx(Text, {\n      children: \"Dark\"\n    }), _jsx(Switch, {\n      isChecked: colorMode === \"light\",\n      onToggle: toggleColorMode,\n      \"aria-label\": colorMode === \"light\" ? \"switch to dark mode\" : \"switch to light mode\"\n    }), _jsx(Text, {\n      children: \"Light\"\n    })]\n  });\n};\n\nvar App = function App() {\n  var commonStore = RootStore.commonStore;\n  console.log(\"commonstore\", commonStore.isLoading);\n\n  var show = function show() {\n    commonStore.setLoaderStatus(!commonStore.isLoading);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      backgroundColor: 'blue'\n    }), _jsx(NavigationContainer, {\n      children: _jsx(NativeBaseProvider, {\n        children: _jsx(AppNavContainer, {})\n      })\n    })]\n  });\n};\n\nexport default observer(App);","map":{"version":3,"names":["React","Text","HStack","Switch","useColorMode","NativeBaseProvider","extendTheme","RootStore","observer","NavigationContainer","AppNavContainer","StatusBar","config","useSystemColorMode","initialColorMode","theme","ToggleDarkMode","colorMode","toggleColorMode","App","commonStore","console","log","isLoading","show","setLoaderStatus"],"sources":["/home/suraj/Desktop/hack/new/ineuron_sport_buddy_app/App.tsx"],"sourcesContent":["import * as React from \"react\";\nimport 'react-native-gesture-handler';\nimport {\n  Text, HStack, Switch, useColorMode, NativeBaseProvider, extendTheme} from \"native-base\";\nimport RootStore from \"./src/stores/RootStore\";\nimport { observer } from \"mobx-react\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppNavContainer from \"./src/navigation\";\nimport { StatusBar } from \"expo-status-bar\";\nimport RootNavigator from \"./src/navigation/RootNavigator\";\n\n// Define the config\nconst config = {\n  useSystemColorMode: false,\n  initialColorMode: \"dark\",\n};\n\n// extend the theme\nexport const theme = extendTheme({ config });\n\ntype MyThemeType = typeof theme;\n\ndeclare module \"native-base\" {\n  interface ICustomTheme extends MyThemeType { }\n}\n\nconst ToggleDarkMode = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return <HStack space={2} alignItems=\"center\">\n    <Text>Dark</Text>\n    <Switch\n      isChecked={colorMode === \"light\"}\n      onToggle={toggleColorMode}\n      aria-label={\n        colorMode === \"light\" ? \"switch to dark mode\" : \"switch to light mode\"\n      }\n    />\n    <Text>Light</Text>\n  </HStack>\n}\n\nconst App: React.FC = () => {\n\n  const { commonStore } = RootStore;\n  console.log(\"commonstore\", commonStore.isLoading)\n\n  const show = () => {\n    commonStore.setLoaderStatus(!commonStore.isLoading);\n  }\n\n  return <>\n    <StatusBar backgroundColor={'blue'} />\n    {/* <SafeAreaView style={{ flex: 0 ,backgroundColor: '#1e3277'}} /> */}\n    <NavigationContainer>\n      <NativeBaseProvider>\n        <AppNavContainer />\n      </NativeBaseProvider>\n    </NavigationContainer>\n  </>\n}\n\nexport default observer(App);\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,8BAAP;AACA,SACEC,IADF,EACQC,MADR,EACgBC,MADhB,EACwBC,YADxB,EACsCC,kBADtC,EAC0DC,WAD1D,QAC4E,aAD5E;AAEA,OAAOC,SAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP;AACA,SAASC,SAAT,QAA0B,iBAA1B;;;;AAIA,IAAMC,MAAM,GAAG;EACbC,kBAAkB,EAAE,KADP;EAEbC,gBAAgB,EAAE;AAFL,CAAf;AAMA,OAAO,IAAMC,KAAK,GAAGT,WAAW,CAAC;EAAEM,MAAM,EAANA;AAAF,CAAD,CAAzB;;AAQP,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAC3B,oBAAuCZ,YAAY,EAAnD;EAAA,IAAQa,SAAR,iBAAQA,SAAR;EAAA,IAAmBC,eAAnB,iBAAmBA,eAAnB;;EAEA,OAAO,MAAC,MAAD;IAAQ,KAAK,EAAE,CAAf;IAAkB,UAAU,EAAC,QAA7B;IAAA,WACL,KAAC,IAAD;MAAA;IAAA,EADK,EAEL,KAAC,MAAD;MACE,SAAS,EAAED,SAAS,KAAK,OAD3B;MAEE,QAAQ,EAAEC,eAFZ;MAGE,cACED,SAAS,KAAK,OAAd,GAAwB,qBAAxB,GAAgD;IAJpD,EAFK,EASL,KAAC,IAAD;MAAA;IAAA,EATK;EAAA,EAAP;AAWD,CAdD;;AAgBA,IAAME,GAAa,GAAG,SAAhBA,GAAgB,GAAM;EAE1B,IAAQC,WAAR,GAAwBb,SAAxB,CAAQa,WAAR;EACAC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,WAAW,CAACG,SAAvC;;EAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;IACjBJ,WAAW,CAACK,eAAZ,CAA4B,CAACL,WAAW,CAACG,SAAzC;EACD,CAFD;;EAIA,OAAO;IAAA,WACL,KAAC,SAAD;MAAW,eAAe,EAAE;IAA5B,EADK,EAGL,KAAC,mBAAD;MAAA,UACE,KAAC,kBAAD;QAAA,UACE,KAAC,eAAD;MADF;IADF,EAHK;EAAA,EAAP;AASD,CAlBD;;AAoBA,eAAef,QAAQ,CAACW,GAAD,CAAvB"},"metadata":{},"sourceType":"module"}